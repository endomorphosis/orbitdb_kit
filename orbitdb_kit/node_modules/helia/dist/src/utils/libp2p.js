import { keychain } from '@libp2p/keychain';
import { defaultLogger } from '@libp2p/logger';
import { Key } from 'interface-datastore';
import { createLibp2p as create } from 'libp2p';
import { libp2pDefaults } from './libp2p-defaults.js';
export async function createLibp2p(options) {
    let peerId = options.libp2p?.peerId;
    const logger = options.logger ?? defaultLogger();
    // if no peer id was passed, try to load it from the keychain
    if (peerId == null) {
        const chain = keychain(options.keychain)({
            datastore: options.datastore,
            logger
        });
        const selfKey = new Key('/pkcs8/self');
        if (await options.datastore.has(selfKey)) {
            // load the peer id from the keychain
            peerId = await chain.exportPeerId('self');
        }
    }
    const defaults = libp2pDefaults(options);
    options = options ?? {};
    // @ts-expect-error derived ServiceMap is not compatible with ServiceFactoryMap
    return create({
        ...defaults,
        ...options.libp2p,
        start: false
    });
}
//# sourceMappingURL=libp2p.js.map